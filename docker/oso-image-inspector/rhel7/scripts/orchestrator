#!/bin/env python
# vim: expandtab:tabstop=4:shiftwidth=4

""" Listen for kubernetes PLEG creation events, and launch an
    image-inspector scan for every newly created customer container. """

import json
import select
import socket
import subprocess
import re

# pylint: disable=no-value-for-parameter,import-error
from Queue import Queue
from threading import Thread
from systemd import journal

from prometheus_client import start_http_server, Summary

REQUEST_TIME = Summary('request_processing_seconds', 'Time spent processing request')


class PlegEventListener(object):
    """ Class to receive and report scan results. """


    def scan_worker(self, scan_q):
        """ Worker thread function. """

        while True:
            container = scan_q.get()
            self.process_container(container)
            scan_q.task_done()


    @staticmethod
    def catch_creates(scan_q):
        """ Watch the host node journal for creates. """

        j = journal.Reader(path='/host/var/log/journal')

        j.log_level(journal.LOG_INFO)

        j.this_boot()

        # Filter log entries
        j.add_match(
            _SYSTEMD_UNIT=u'atomic-openshift-node.service',
        )

        j.seek_tail()

        j.get_previous()

        pollobj = select.poll()

        journal_fd = j.fileno()
        poll_event_mask = j.get_events()
        pollobj.register(journal_fd, poll_event_mask)

        ab_sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        ab_sock.bind('\0Orchestrator')
        ab_sock.listen(1)

        while True:
            if pollobj.poll(10000):
                if j.process() == journal.APPEND:
                    for entry in j:
                        match = re.search(r"(&pleg\.PodLifecycleEvent).+(ContainerStarted)", \
                                entry['MESSAGE'], re.IGNORECASE)
                        if match:
                            container_id = entry['MESSAGE'].split('Data:')[1].split('"')[1::2][0]

                            scan_q.put(container_id)


    @staticmethod
    @REQUEST_TIME.time()
    def process_container(container_id):
        """ Check if provided container should be scanned. """

        inspect_output = subprocess.check_output([\
        'chroot', \
        '/host', \
        '/usr/bin/crictl', \
        'inspect', \
        container_id
                                                 ])
        inspect_dict = json.loads(inspect_output)

        container_name = inspect_dict['status']['labels']['io.kubernetes.container.name']
        container_ns = inspect_dict['status']['labels']['io.kubernetes.pod.namespace']

        is_pod = re.match(r"(^\/k8s_POD)", container_name, re.I)
        is_ops = re.match(r"(^openshift-)\w+", container_ns, re.I)
        is_logging = re.match(r"(^logging$)\w+", container_ns, re.I)
        is_hmc = re.match(r"(^oso-rhel7-host-monitoring$)\w+", container_name, re.I)

        scan_cmd = ['image-inspector', \
                    '-scan-type=clamav', \
                    '-clam-socket=/host/host/var/run/clamd.scan/clamd.sock', \
                    '-container=' + container_id, \
                    '-post-results-url=http://localhost:8080'
                   ]
        print(scan_cmd)
        if not is_pod and not is_ops and not is_logging and not is_hmc:
            subprocess.call(scan_cmd)


    def main(self):
        """ Main function. """

        scan_q = Queue()
        worker = Thread(target=self.scan_worker, args=(scan_q,))
        worker.setDaemon(True)
        worker.start()

        start_http_server(8000)
        self.catch_creates(scan_q)


if __name__ == '__main__':
    EVENTLISTENER = PlegEventListener()
    EVENTLISTENER.main()
