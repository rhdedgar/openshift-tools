#!/bin/env python3.4
# vim: expandtab:tabstop=4:shiftwidth=4

""" A small server to listen for image-inspector scan results and log them to a local file. """

import argparse
import json
import os
import socket
import subprocess
import sys
import yaml


class ClamLogSrv(object):
    """ Class to receive and report scan results. """


    @staticmethod
    def check_arguments():
        """ Ensure that an argument was passed in from the command line.
        Returns:
            Parsed argument(s), if provided
        """

        parser = argparse.ArgumentParser(description='Get parameters from the user.')
        parser.add_argument('-p', '--port',
                            help='Specify the port on which to listen for clam scan results.')
        parser.add_argument('-s', '--servername',
                            help='Specify name of the host of the socket, e.g. localhost.')
        parser.add_argument('-l', '--logfile',
                            help='Provide the path to the logfile on the host.')
        args = parser.parse_args()

        if not args.servername and not args.port and not args.logfile:
            print('Specify the hostname, port, and logfile location.\n'
                  'Usage:\n'
                  'example: {0} -s localhost -p 8080 -l /var/log/clam/scanlog'.format(parser.prog))
            sys.exit(10)

        return args


    def convert_types(self, data):
        """ Used to convert dicts of bytes received as json.

            Returns:
                a dict of strings
                a string converted from bytes
         """

        if isinstance(data, bytes):
            return data.decode('ascii')
        if isinstance(data, dict):
            return dict(map(self.convert_types, data.items()))
        if isinstance(data, tuple):
            return map(self.convert_types, data)
        return data


    @staticmethod
    def send_results(rec_js, ctrl_host, ctrl_port):
        """ Used to send a string representation of a json dict to clam-controller. """

        try:
            send_bytes = str(rec_js).encode("ascii")

            sendsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

            sendsock.connect((ctrl_host, int(ctrl_port)))

            sendsock.sendall(send_bytes)
        except socket.gaierror:
            print("cannot resolve service: ", ctrl_host)


    # pylint: disable=too-many-locals, too-many-statements
    def start_serve(self, hostname, hostport, logfile):
        """ Listen on specified port for incoming clam logs. """

        config_path = '/secrets/aws_config.yml'
        config_settings = self.get_controller(config_path)

        ctrl_host = config_settings['oii_control_host']
        ctrl_port = config_settings['oii_contrl_port']

        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

        server_address = (hostname, int(hostport))
        sock.bind(server_address)

        sock.listen(1)

        while True:
            connection, _ = sock.accept()

            try:
                while True:
                    # pylint: disable=no-member
                    data = connection.recv(10240)
                    newdata = data.split(b'\r\n\r\n')[1].strip(b"'")

                    conv_js = self.convert_types(newdata)

                    try:
                        rec_js = json.loads(conv_js)
                    except ValueError:
                        rec_js = conv_js

                    if isinstance(rec_js, dict) and 'results' not in rec_js \
                    or 'FOUND' not in rec_js['results']['description']:
                        print(rec_js)
                        print('No positive scan results, skipping')
                        break

                    filemode = ''
                    container_id = rec_js['containerID']

                    if os.path.isfile(logfile):
                        filemode = 'a'
                    else:
                        filemode = 'w'

                    with open(logfile, filemode) as open_file:
                        try:
                            container_ns = self.convert_types(subprocess.check_output([\
                            'chroot', \
                            '/host', \
                            '/usr/bin/docker', \
                            'inspect', \
                            '--format', \
                            '\'{{index .Config.Labels "io.kubernetes.pod.namespace"}} \
                            {{index .Config.Labels "io.kubernetes.pod.name"}}\'', \
                            container_id
                                                                                      ])
                                                             ).replace('\'', '')

                            rec_js['nameSpace'] = self.convert_types(container_ns.split()[0])
                            rec_js['podName'] = self.convert_types(container_ns.split()[1])

                            self.send_results(rec_js, ctrl_host, ctrl_port)

                            conv_js = self.convert_types(rec_js)
                            open_file.write(json.dumps(conv_js, indent=4, sort_keys=True))

                            inspectlog = logfile + '_inspect_output.log'

                            if os.path.isfile(inspectlog):
                                filemode = 'ab'
                            else:
                                filemode = 'wb'

                            try:
                                with open(inspectlog, filemode) as open_file:
                                    open_file.write(
                                        subprocess.check_output([\
                                        'chroot', \
                                        '/host', \
                                        '/usr/bin/docker', \
                                        'inspect', \
                                        container_id
                                                                ])
                                    )

                            except subprocess.CalledProcessError:
                                print('cannot get full output')
                                break
                            break
                        except subprocess.CalledProcessError:
                            print('cannot get the namespace')
                            break

            finally:
                connection.close()


    @staticmethod
    def get_controller(config_path):
        """ Get info about the clam-controller that will be used to process positive scan results

            Returns:
                A dictionary with the address and port of the clam-controller.
         """

        config_settings = {}

        if os.path.isfile(config_path):
            with open(config_path, 'r') as log_config:
                yaml_config = yaml.load(log_config)

                try:
                    config_settings['oii_control_host'] = yaml_config['oii_control_host']
                except KeyError:
                    pass

                try:
                    config_settings['oii_contrl_port'] = yaml_config['oii_contrl_port']
                except KeyError:
                    pass

        return config_settings


    def main(self):
        """ Main function. """

        args = self.check_arguments()

        if args.servername and args.port and args.logfile:
            self.start_serve(args.servername, args.port, args.logfile)

        else:
            raise ValueError('Please specify server name, port, and logfile.')


if __name__ == '__main__':
    CLAMLOG = ClamLogSrv()
    CLAMLOG.main()
