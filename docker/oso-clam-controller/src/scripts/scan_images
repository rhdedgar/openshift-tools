#!/bin/env python
# vim: expandtab:tabstop=4:shiftwidth=4

""" Listen for kubernetes PLEG creation events, and launch an
    image-inspector scan for every newly created customer container. """

import subprocess
import re

#pylint: disable=import-error, line-too-long
from datetime import datetime, timedelta
#from Queue import Queue
#from threading import Thread


class PlegEventListener(object):
    """ Class to receive and report scan results. """


#    def scan_worker(self, scan_q):
#        """ This is the worker thread function. """
#        while True:
#            container = scan_q.get()
#            self.process_container(container)
#            scan_q.task_done()


#    def scan_worker():
#        """ This is the worker thread function. """
#        print("listener, gonna send container off for scanning")
#        # add container id and function to process it here
#        scan_q.put(container_id)
#        #self.process_container(container_id)


    # pylint: disable=too-many-locals

    def gather_images(self):
        """ Gather and filter registry images. """

        reg_cmd = ['oc', 'get', 'service', '-n', 'default', 'docker-registry', '--template=\'{{index .spec "clusterIP"}}:{{(index .spec.ports 0).port}}\'']
        reg_add = subprocess.check_output(reg_cmd).strip('\'').strip('\"')
        priv_ns = r'(^' + reg_add + r'\/openshift-)'
        heal_ns = r'(^' + reg_add + r'\/ops-health-monitoring\/)|(^docker-registry.default.svc:5000\/ops-health-monitoring\/)'
        print(reg_add)
        print(priv_ns)
        img_list = subprocess.check_output(['oc', 'get', 'images', '--no-headers=true']).splitlines()

        for imname in img_list:
            im_id = imname.split()[0]
            im_add = imname.split()[1]
            is_health = re.match(heal_ns, im_add, re.I)
            is_rh = re.match(r"(^registry.connect.redhat.com)|(^registry.access.redhat.com)|(^registry.reg-aws.openshift.com)", im_add, re.I)
            is_ops = re.match(priv_ns, im_add, re.I)

            if not is_health and not is_rh and not is_ops:
                self.process_image(im_add, im_id)


    @staticmethod
    def process_image(im_add, im_id):
        """ Scan the provided image. """

        img_cmd = ['oc', 'export', 'image', im_id, '--template=\'{{with .metadata.annotations.scanned}}{{.}} {{else}}never-scanned {{end}}{{.metadata.name}}\'']

        img_output = subprocess.check_output(img_cmd).strip('\'').strip('\"')
        print(img_output)
        podstamp = img_output.split()[0]

        if podstamp == 'never-scanned' or \
        datetime.today()-timedelta(weeks=2) > \
        datetime.strptime(podstamp, '%Y%m%d'):

            curdate = datetime.now().strftime('%Y%m%d')

            anno_cmd = ['oc', 'annotate', 'image', im_id, 'scanned=' + curdate, '--overwrite']
            subprocess.run(anno_cmd)

            scan_cmd = ['image-inspector', '-scan-type=clamav', '-clam-socket=/host/host/var/run/clamd.scan/clamd.sock', '-image=' + im_add, '-post-results-url=http://localhost:8080', '--path=/tmp/image-content']
            print(scan_cmd)
            subprocess.run(scan_cmd)
            # todo: catch errors with the image-inspector command and de-annotate if there was an issue?


    def main(self):
        """ Main function. """
        self.gather_images()
#        scan_q = Queue()
#        worker = Thread(target=self.scan_worker, args=(scan_q,))
#        worker.setDaemon(True)
#        worker.start()

        #self.(scan_q)


if __name__ == '__main__':
    EVENTLISTENER = PlegEventListener()
    EVENTLISTENER.main()
