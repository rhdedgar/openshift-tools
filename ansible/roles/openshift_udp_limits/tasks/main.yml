---
- name: Choose a master on which to run
  set_fact:
    cluster_master: "{{ groups['oo_hosttype_master'] | intersect(groups['oo_clusterid_' ~ oo_clusterid]) | first }}"
  run_once: true

- oc_obj:
    state: list
    kind: hostsubnet
  register: hostsubnets
  delegate_to: "{{ cluster_master }}"
  run_once: true

- set_fact:
    kubernetes_node_name: "{{ (hostvars[inventory_hostname].ec2_private_dns_name if hostvars[inventory_hostname].oo_location == 'aws' else inventory_hostname) }}"

- set_fact:
    node_cidr: |-
      {%- for item in hostsubnets['results']['results'][0]['items'] -%}
       {%- if item.host == kubernetes_node_name -%}
        {{ item.subnet }}
       {%- endif -%}
      {%- endfor -%}

- debug:
    msg: "{{node_cidr}} {{inventory_hostname}}"

- set_fact:
    oo_udp_chain:
    - chain: oo-udp
      after: "filter$"
      regex: :oo-udp - \[0:0\]
      block:  ":oo-udp - [0:0]"

    oo_udp_limit_chain:
    - chain: oo-udp-limit
      after: "filter$"
      regex: :oo-udp-limit - \[0:0\]
      block:  ":oo-udp-limit - [0:0]"

    forward_udp_rules:
    # allow all outbound UDP for privileged pods
    # send all other traffic to the oo-udp chain so that rules that allow
    # traffic can call -j RETURN instead of -j ACCEPT, and thus permit us
    # to do later accounting
    - chain: FORWARD
      after: "^-A INPUT"
      regex: "id_outbound_udp_forward_1_"
      block: |-
        -A FORWARD -o eth0 -p udp -s 172.0.0.0/8 -j ACCEPT
        -A FORWARD -o eth0 -p udp -s 10.0.0.0/8 -j oo-udp

    outbound_udp_rules:
    # Allow all DNS traffic to whitelisted DNS servers, with no limits.
    # Limit any remaining permitted UDP traffic to 30 datagrams per second,
    # and define permitted UDP traffic for un-privileged pods
    # Finally, drop all other UDP traffic. Log dropped traffic up to once per minute.
    # Because all dropped traffic is crammed into this single limited log rule,
    # log entries will only be a sampling of actual dropped traffic.
    - chain: oo-udp
      after: "OUTPUT"
      regex: "id_outbound_udp_rule_2_"
      block: |-
        -A oo-udp -o eth0 -p udp --dport 53 -d 172.16.0.0/12 -j RETURN
        -A oo-udp -o eth0 -p udp --dport 53 -d 204.13.250.23 -j RETURN
        -A oo-udp -o eth0 -p udp --dport 53 -d 204.13.251.23 -j RETURN
        -A oo-udp -o eth0 -p udp --dport 53 -d 208.78.70.23 -j RETURN
        -A oo-udp -o eth0 -p udp --dport 53 -d 208.78.71.23 -j RETURN
        -A oo-udp -o eth0 -p udp -s 10.0.0.0/8 -j oo-udp-limit
        -A oo-udp -o eth0 -p udp --dport 123 -j RETURN
        -A oo-udp -o eth0 -p udp --dport 67 -j RETURN
        -A oo-udp -o eth0 -p udp --dport 161 -j RETURN
        -A oo-udp -o eth0 -p udp --dport 500 -j RETURN
        -A oo-udp -o eth0 -p udp --dport 1514 -j RETURN
        -A oo-udp -o eth0 -p udp --dport 4500 -j RETURN
        -A oo-udp -o eth0 -p udp --dport 25826 -j RETURN
        -A oo-udp -o eth0 -p udp -m limit --limit 1/min --limit-burst 1 -j LOG --log-prefix "UDP:DROPPED_ALL:"
        -A oo-udp -p udp -j DROP

    # Generate per-user outbound UDP limits for every IP in the host subnet
    - chain: oo-udp-limit
      after: "OUTPUT"
      regex: "id_outbound_udp_rule_3_"
      block: |-
         {%- for i in range(1, (node_cidr | ipaddr('size'))-1) -%}
          -A oo-udp-limit -s {{ node_cidr | ipaddr(i) }} -m limit --limit 30/s -j RETURN
         {% endfor -%}

    # Drop all UDP traffic that exceeds the per-user limits. 
    # Log dropped traffic up to once per minute.
    # Because all dropped traffic is crammed into this single limited log rule,
    # log entries will only be a sampling of actual dropped traffic.
    - chain: oo-udp-limit
      after: "OS_FIREWALL_ALLOW"
      regex: "id_outbound_udp_rule_4_"
      block: |-
        -A oo-udp-limit -m limit --limit 1/min --limit-burst 1 -j LOG --log-prefix "UDP:DROPPED_FLOOD:"
        -A oo-udp-limit -j DROP

- name: list iptables rules FORWARD chain
  command: '/usr/sbin/iptables -w -nL FORWARD'
  changed_when: False
  register: forward_chain_check

- name: list iptables rules udp chain
  command: '/usr/sbin/iptables -w -nL oo-udp'
  changed_when: False
  register: udp_chain_check
  ignore_errors: True

- name: list iptables rules udp limit chain
  command: '/usr/sbin/iptables -w -nL oo-udp-limit'
  changed_when: False
  register: udp_limit_chain_check
  ignore_errors: True

- name: create in-memory udp chain
  command: "/usr/sbin/iptables -N oo-udp"
  when: not "oo-udp" in udp_chain_check.stdout
  with_items: "{{ oo_udp_chain }}"

- name: create in-memory udp limit chain
  command: "/usr/sbin/iptables -N oo-udp-limit"
  when: not "oo-udp-limit" in udp_limit_chain_check.stdout
  with_items: "{{ oo_udp_limit_chain }}"

- debug:
    msg: "{{ item }}"
  with_items:
  - "{{ forward_udp_rules}}"
#  - "{{ outbound_udp_rules }}"

- name: modify in-memory forward chain
  command: /usr/sbin/iptables "{{ item }}"
  when: not item in forward_chain_check.stdout
  with_items: |-
   {%- set block_rules = forward_udp_rules|map(attribute='block')|join(',') -%}
    {%- for line in block_rules.split(',') -%}
     {{- line -}}
    {% endfor %}

- name: modify in-memory udp chains
  command: /usr/sbin/iptables "{{ item }}"
  when: not item in udp_chain_check.stdout and not item in udp_limit_chain_check.stdout
  with_items: |-
   {%- for line in outbound_udp_rules['item']['block'] -%}
    {{- line -}}
   {% endfor %}

- name: modify /etc/sysconfig/iptables
  blockinfile:
    dest: /etc/sysconfig/iptables
    insertafter: "{{ item.after }}"
    block: "{{ item.block }}"
    marker: "# {mark} Ansible-managed {{ item.regex }} UDP limit rules"
  with_items: 
  - "{{ forward_udp_rules }}"
  - "{{ oo_udp_chain }}"
  - "{{ oo_udp_limit_chain}}"
  - "{{ outbound_udp_rules }}"

- name: copy tcp_out_logging config file
  copy:
    src: iptables_udp.conf
    dest: /etc/rsyslog.d/iptables_udp.conf
    mode: "0644"
    owner: root
    group: root
  notify: restart rsyslog

- name: setup iptables UDP log rotate
  copy:
    content: |
      /var/log/iptables.log {
          copytruncate
          missingok
          notifyifempty
          compress
          weekly
      }
    dest: /etc/logrotate.d/iptables_udp
    mode: "0640"
    owner: root
    group: root
